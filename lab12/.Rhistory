) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(pop==input$pop&!is.na(sex)) %>%
ggplot(aes_string(x = sex, fill=sex)) +geom_bar(na.rm = T)
# geom_smooth(method=lm, se=T)+
# scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("pop", " Select Pop of Interest:", choices=unique(wolves$pop)), hr(),
helpText("Graphs wolf pop intrest")),
# create a spot for the barplot
mainPanel(
plotOutput("wolfPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$pop) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("pop", " Select Pop of Interest:", choices=unique(wolves$pop)), hr(),
helpText("Graphs wolf pop intrest")),
# create a spot for the barplot
mainPanel(
plotOutput("wolfPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$pop) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("pop", " Select Taxon of Interest:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(sex == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("WolfPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("wolfPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: mmmm wolves")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)))
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)))
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)))
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon&!is.na(sex)) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)
)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)
)
library(tidyverse)
library(shiny)
library(shinydashboard)
wolves <- readr::read_csv("data/wolves_data/wolves_dataset.csv")
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
)
# define a server for the Shiny app
server <- function(input, output, session) {
ui <- fluidPage(
titlePanel("Wolf population plot"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Wolf pop:", choices=unique(wolves$pop)), hr(),
helpText("Reference: pop wolves from https://doi.org/10.5061/dryad.5hqbzkh51")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))#I have no idea why but changing this line of code makes the graph not appear on my computer soooo dw bout it
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
wolves %>%
filter(pop == input$taxon) %>%
ggplot(aes(x=sex)) +
geom_bar(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
